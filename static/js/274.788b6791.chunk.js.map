{"version":3,"file":"static/js/274.788b6791.chunk.js","mappings":"uKACA,EAAyB,qBAAzB,EAAsD,oBAAtD,EAAkF,oB,oCCQlE,SAASA,EAAT,GAA2B,IAAZC,EAAW,EAAXA,SAC7B,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAiCC,EAAAA,EAAAA,MAAjC,eAAOC,EAAP,KAAmBC,EAAnB,KAAmBA,UAMbC,EAAc,SAACC,GACnB,MAAwBA,EAAMC,OAAtBT,EAAR,EAAQA,KAAMU,EAAd,EAAcA,MAEd,OAAQV,GACN,IAAK,OACHC,EAAQS,GACR,MAEF,IAAK,SACHP,EAAUO,GACV,MAEF,QACE,SAqBAC,EAAY,WAChBV,EAAQ,IACRE,EAAU,KAGZ,OACE,kBAAMS,SAvBa,SAACJ,GAKpB,GAJAA,EAAMK,iBACVC,QAAQC,IAAIjB,GACaA,EAASkB,KAAI,SAACC,GAAD,OAAaA,EAAQjB,QAEtCkB,SAASV,EAAMW,cAAcnB,KAAKU,OAGjD,OAFAU,MAAM,GAAD,OAAIZ,EAAMW,cAAcnB,KAAKU,MAA7B,gCACLC,IAKFN,EAAWL,EAAME,GACjBmB,IAAAA,OAAAA,QAAA,UAA2BrB,EAA3B,uBACAW,KASA,WACE,kBAAOW,UAAWC,EAAlB,mBACA,kBACED,UAAWC,EACXb,MAAOV,EACPwB,SAAUjB,EACVkB,KAAK,OACLzB,KAAK,OACL0B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAGV,kBAAON,UAAWC,EAAlB,qBACA,kBACED,UAAWC,EACXb,MAAOR,EACPsB,SAAUjB,EACVkB,KAAK,MACLzB,KAAK,SACL0B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAGV,oBAAQN,UAAWC,EAAUE,KAAK,SAASI,SAAUvB,EAArD,yBACeA,GAAa","sources":["webpack://my-app/./src/Components/Form/Form.module.css?ea3d","Components/Form/Form.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Form_button__YiJPo\",\"input\":\"Form_input__vaw3o\",\"label\":\"Form_label__n2FLN\"};","import { useState } from \"react\";\nimport s from \"./Form.module.css\";\nimport PropTypes from \"prop-types\";\n// import { useSelector,useDispatch } from \"react-redux\";\n// import {addContact} from '../../redux/actions'\nimport {useAddContactMutation} from \"../../redux/slice\";\nimport Notiflix from \"notiflix\";\nimport Loader from \"../Loader/Loader\";\n\n export default function Form({contacts}) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const [addContact,{isLoading}] = useAddContactMutation()\n\n  // const contacts = useSelector(state =>state.contacts.items)\n  // const dispatch = useDispatch()\n\n\n  const handleInput = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\nconsole.log(contacts);\n    const contactNames = contacts.map((contact) => contact.name);\n\n    if (contactNames.includes(event.currentTarget.name.value)) {\n      alert(`${event.currentTarget.name.value} is alredy in contacts`);\n      resetForm();\n      return;\n    }\n\n    // dispatch(addContact(name, number))\n    addContact(name, number)\n    Notiflix.Notify.success(`${name} added to contacts`);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label className={s.label}>Name</label>\n      <input\n        className={s.input}\n        value={name}\n        onChange={handleInput}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <label className={s.label}>Number</label>\n      <input\n        className={s.input}\n        value={number}\n        onChange={handleInput}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n \n      <button className={s.button} type=\"submit\" disabled={isLoading}>\n        Add contact {isLoading && '...'}\n      </button>  \n     \n \n    </form>\n  );\n}\n\nForm.propTypes = {\n  // addContact: PropTypes.func.isRequired,\n// contacts: PropTypes.array.isRequired,\n};\n\n"],"names":["Form","contacts","useState","name","setName","number","setNumber","useAddContactMutation","addContact","isLoading","handleInput","event","target","value","resetForm","onSubmit","preventDefault","console","log","map","contact","includes","currentTarget","alert","Notiflix","className","s","onChange","type","pattern","title","required","disabled"],"sourceRoot":""}